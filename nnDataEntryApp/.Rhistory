d['a',]
d['a' == 1,]
d[d['a'] == 1,]
parse(d)
parse('d')
deparse('d')
parse(substitute('d'))
deparse(substitute('d'))
eval(parse(text = 'd'))
d[eval(parse(text = 'a')) == 1,]
d
d[eval(parse(text = 'a')) == 1,]
eval(parse(text = 'a'))
d[d['a'] == 1,]
d[d['a'] == eval(parse(text == '1')),]
d[d['a'] == eval(parse(text = '1')),]
shiny::runApp()
shiny::runApp()
294-215
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
filter
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
291-215
dataAddOrModify
dataAddOrModify
eval(parse(text = 'd'))
shiny::runApp()
285-215
shiny::runApp()
rm(list = ls())
shiny::runApp()
exists
exists('d')
exists(d)
d <- data.frame(a  = c(1,2), b = c(1, 3))
exists(d)
exists(eval(parse(text = 'd')))
three = 'three'
exists(three)
shiny::runApp()
exists(a)
exists(world)
?exists
exists(world, ifnotfound = FALSE)
exists(world, ifnotfound = 'FALSE')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list = ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?img
401/293
293/401
300*0.7306733
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd('C:/Users/Brian/Desktop/gits/shiny/appNestwatchSiteSelection')
# wd:
# setwd('C:/Users/Brian/Desktop/gits/shiny/appNestwatchSiteSelection')
library(shiny)
library(shinydashboard)
library(leaflet)
# User interface
ui <- fluidPage(
titlePanel ('Neighborhood Nestwatch Site Selection Tool'),
sidebarLayout(position = 'left',
sidebarPanel(h3(strong('Site selection dashboard')),
# Define study region:
h4(strong('1. Select Study Region:')),
p('Please select your study region from the drop menu.'),
selectInput('studyRegion','',
c('Atlanta, GA' = 'atlanta',
'Gainesville, FL' = 'gainesville',
'Pittsburgh, PA' = 'pittsburgh',
'Raleigh, NC' = 'raleigh',
'Springfield, MA' = 'springfield',
'Washington, DC' = 'dc')),
# Data upload, exhisting sites:
h4(strong('2. Upload existing site data:')),
p('Important! The input file must be a three-column csv file of exiting
Neighborhood Nestwatch sites with the fields "siteID","longitude" and
"latitude" provided in that order.'),
fileInput('existingSites','',
accept = c('test/csv', 'text/comma-separated-values,text/plain','.csv')),
# Data upload, potential sites:
h4(strong('3. Upload data for prospective sites:')),
p('Important! The input file must be a three-column csv file of exiting
Neighborhood Nestwatch sites with the fields "siteID","longitude" and
"latitude" provided in that order.'),
fileInput('potentialSites','',
accept = c('test/csv', 'text/comma-separated-values,text/plain','.csv')),
# Define resolution Resolution:
h4(strong('4. Provide the target resolution:')),
p('This is the distance in meters from each household center for which
you will calculate the proportion of impervious surface'),
numericInput('radius','',500, 50, 5000, step = 50),
# Submit data for analysis:
h4(strong('5. Select your sites!')),
# submitButton('Submit!')),
actionButton('submit','Submit encounter data!',
class = "btn-primary")),
#         br(),
#       # Download output:
#         h4(strong('6. Download output')),
#           p('Use the button below if you would like to download a csv file of the
#             proportion of impervious surface surrounding existing and potential sites.'),
#           downloadButton('downloadTabular', 'Download Tabular Output')),
# Graphical summary:
mainPanel(
tabsetPanel(
tabPanel(
'Map Viewer',
# fluidRow(
leafletOutput('map')),
# hr(),
#       fluidRow(
#         column(3,
#                checkboxInput('impervious','Show Impervious',FALSE))
#
#                     box(width = NULL, status = 'warning',
#                         uiOutput = 'layersSelect'
#                         checkboxGroupInput('mapCheckGroup',
#                           label = h3('Map layers'),
#                             choices = c(
#                               'Impervious' = 1,
#                               'Existing sites' = 2,
#                               'Potential sites' = 3
#                               ), selected = 2)))
#                    ),
tabPanel('Summary Plots',plotOutput('plot')),
tabPanel('Data Table', tableOutput('table'))
)
)
#       mainPanel(
#         tabsetPanel(
#           tabPanel(
#             'Map Viewer',
#                    fluidRow(leafletOutput('map')),
#                    hr(),
#                    fluidRow(
#                      column(3,
#                             checkboxInput('impervious','Show Impervious',FALSE))
# #
# #                     box(width = NULL, status = 'warning',
# #                         uiOutput = 'layersSelect'
# #                         checkboxGroupInput('mapCheckGroup',
# #                           label = h3('Map layers'),
# #                             choices = c(
# #                               'Impervious' = 1,
# #                               'Existing sites' = 2,
# #                               'Potential sites' = 3
# #                               ), selected = 2)))
# #                    ),
#                    )),
#           tabPanel('Summary Plots',plotOutput('plot')),
#           tabPanel('Data Table', tableOutput('table'))
#           )
# )
)
)
# Server
server <- function(input, output) {
output$table <- renderTable({
inFileExistingSites <- input$existingSites
inFilePotentialSites <- input$potentialSites
if (is.null(inFileExistingSites))
return(NULL)
existingSites <- read.csv(inFileExistingSites$datapath) %>%
mutate(siteType = 'existing', imp = 'FILL')
if (is.null(inFilePotentialSites))
return(existingSites)
potentialSites  <- read.csv(inFilePotentialSites$datapath) %>%
mutate(siteType = 'potential', imp = 'FILL')
rbind(existingSites, potentialSites)
})
points <- read.csv('sampleExistingsites.csv') %>%
select(longitude, latitude)
output$map <- #observeEvent(#input$submit,
# output$map <- observeEvent(
renderLeaflet({
leaflet() %>%
# addProviderTiles('OpenTopoMap') %>%
# addProviderTiles('Esri.WorldImagery') %>%
# addProviderTiles('Thunderforest.Landscape') %>%
# addProviderTiles('NASAGIBS.ViirsEarthAtNight2012') %>%
addProviderTiles('OpenStreetMap.Mapnik') %>%
addMarkers(lng = points$longitude, lat = points$latitude) #%>%
#         addWMSTiles(
#           "http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
#           layers = "nexrad-n0r-900913",
#           options = WMSTileOptions(format = "image/png", transparent = TRUE),
#           attribution = "Weather data Â© 2012 IEM Nexrad"
#         )
})
#)
}
shinyApp(ui = ui, server = server)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd('C:/Users/Brian/Dropbox/test_google_sheets_method')
shiny::runApp()
shiny::runApp()
workbookConnection <- '13opVBoOF9-F_3Vo4ty3UdT--LHMWmJbml69DyImKEik' %>%
gs_key(verbose = FALSE)
workbookConnection %>%
gs_read(ws = "Point_count_data",
col_types = cols(timePc = 'c', datePc = 'c'))
workbookConnection %>%
gs_read(ws = "Point_count_data",
col_types = cols(timePc = 'c', datePc = 'c'))
shiny::runApp()
shiny::runApp()
fieldCodesSite <- c(
'hubSite',	'siteSite',	'lastNameOrSchoolSite',	'firstNameSite',	'lonSite',
'latSite',	'startYearSite',	'addressSite',	'phone1Site',	'phone2Site',
'email1Site',	'email2Site',	'notesSite'
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?updateNumericInput
shiny::runApp()
?round_any
?round
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
aouCodes
aouCodes <- read.csv('speciesAouForApp.csv', stringsAsFactors = FALSE)
aouCodes
head(aouCodes)
justAlphaCode <- aouCodes %>% .$Alpha
justAlphaCode
head(justAlphaCode)
shiny::runApp()
0:5
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getwd()
setwd('C:/Users/Brian/Dropbox')
list.files()
setwd('nnDataEntryApp')
list.files()
test <- read.csv('LHTCPdyadSum.csv', stringsAsFactors = FALSE) %>% tbl_df
test
test <- read.csv('LHTCPdyadSum.csv', stringsAsFactors = FALSE) %>% tbl_df %>%
select(Color1, Color2)
test
c(test$Color1, test$Color2) %>% unique
idV <- c(test$Color1, test$Color2) %>% unique
idV
i = 1
idV[i]
tf <- filter(test, str_detect(Dyad.ID, idV[1]))
test
test <- read.csv('LHTCPdyadSum.csv', stringsAsFactors = FALSE) %>% tbl_df %>%
select(Dyad.ID, Color1, Color2, weight2)
test
idV <- c(test$Color1, test$Color2) %>% unique
i = 1
tf <- filter(test, str_detect(Dyad.ID, idV[1]))
tf
idV
idV[1:i]
i = 5
idV[1:i]
idV[1:(i-1)]
test %>% filter(str_detect(Dyad.ID, idV[i]))
test %>% filter(str_detect(Dyad.ID, idV[i]),
!str_detect(Dyad.ID, idExclude))
idExclude <- idV[1:(i-1)]
idExclude
test %>% filter(str_detect(Dyad.ID, idV[i]),
!str_detect(Dyad.ID, idExclude))
i = 41
idExclude <- idV[1:(i-1)]
idExclude
test %>% filter(str_detect(Dyad.ID, idV[i]),
!str_detect(Dyad.ID, idExclude))
i = 20
test %>% filter(str_detect(Dyad.ID, idV[i]),
!str_detect(Dyad.ID, idExclude))
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude))
i = 10
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude))
i = 2
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude))
idExclude
length(idV)
length(idExclude)
i = 2
length(idExclude)
i = 30
length(idExclude)
idExclude <- idV[1:(i-1)]
length(idExclude)
i = 1
idExclude <- idV[1:(i-1)]
length(idExclude)
idExclude
idV
idV[1:0]
idV[1:2]
if(i > 1){
idExclude <- idV[1:(i-1)]
} else {
idExclude <- 'howdy'
}
i = 1
i = 1
if(i > 1){
idExclude <- idV[1:(i-1)]
} else {
idExclude <- 'howdy'
}
length(idExclude)
idExclude
if(i > 1){
idExclude <- idV[1:(i-1)]
} else {
idExclude <- 'foo'
}
length(idExclude)
i = 20
if(i > 1){
idExclude <- idV[1:(i-1)]
} else {
idExclude <- 'foo'
}
length(idExclude)
idExclude
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude))
i = 2
if(i > 1){
idExclude <- idV[1:(i-1)]
} else {
idExclude <- 'foo'
}
length(idExclude)
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude))
idV[i]
i
idV[1]
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude),
!(Color2 %in% idExclude))
i = 43
if(i > 1){
idExclude <- idV[1:(i-1)]
} else {
idExclude <- 'foo'
}
length(idExclude)
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude),
!(Color2 %in% idExclude))
i = 20
if(i > 1){
idExclude <- idV[1:(i-1)]
} else {
idExclude <- 'foo'
}
length(idExclude)
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude),
!(Color2 %in% idExclude))
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude),
!(Color2 %in% idExclude))
i = 3
if(i > 1){
idExclude <- idV[1:(i-1)]
} else {
idExclude <- 'foo'
}
length(idExclude)
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude),
!(Color2 %in% idExclude))
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude),
!(Color2 %in% idExclude)) %>%
mutate(targetColor = idV[i])
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude),
!(Color2 %in% idExclude)) %>%
mutate(targetColor = idV[i],
interactionColor = ifelse(
Color1 != targetColor, Color1, Color2
))
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude),
!(Color2 %in% idExclude)) %>%
mutate(targetColor = idV[i],
interactionColor = ifelse(Color1 != targetColor,
Color1, Color2),
Dyad.ID = interactionColor
)
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude),
!(Color2 %in% idExclude)) %>%
mutate(targetColor = idV[i],
interactionColor = ifelse(Color1 != targetColor,
Color1, Color2),
Dyad.ID = paste(targetColor, interactionColor)
)
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude),
!(Color2 %in% idExclude)) %>%
mutate(targetColor = idV[i],
interactionColor = ifelse(Color1 != targetColor,
Color1, Color2),
Dyad.ID = paste(targetColor, interactionColor, sep = '-')
)
test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude),
!(Color2 %in% idExclude)) %>%
mutate(targetColor = idV[i],
interactionColor = ifelse(Color1 != targetColor,
Color1, Color2),
Dyad.ID = paste(targetColor, interactionColor, sep = '-')
) %>%
group_by(Dyad.ID) %>%
summarize(weight2 = sum(weight2))
idV <- c(test$Color1, test$Color2) %>% unique
outList <- vector('list', length = length(idV))
outList
outList <- vector('list', length = length(idV))
for(i in 1:length(idV)){
if(i > 1){
idExclude <- idV[1:(i-1)]
} else {
idExclude <- 'foo'
}
outList[[i]] <- test %>% filter(str_detect(Dyad.ID, idV[i]),
!(Color1 %in% idExclude),
!(Color2 %in% idExclude)) %>%
mutate(targetColor = idV[i],
interactionColor = ifelse(Color1 != targetColor,
Color1, Color2),
Dyad.ID = paste(targetColor, interactionColor, sep = '-')
) %>%
group_by(Dyad.ID) %>%
summarize(weight2 = sum(weight2))
}
outList
bind_rows(outList)
bind_rows(outList) %>% View
rsconnect::showLogs()
getwd()
